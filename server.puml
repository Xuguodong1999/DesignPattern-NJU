@startuml
' 数据表部分
class User {
    +User()
    +int getUid() const
    +int getUtype()
    +void setUtype(Utype utype)
    +void setUid(int uid)
    +const QString &getUname()
    +void setUname(const QString &uname)
    +const QString &getPassword()
    +void setPassword(const QString &password)
    +const QString &getPhoto()
    +void setPhoto(const QString &photo)
    +double pay(double _pay)
    +void setDiscount(std::shared_ptr<Discount> _discount)
    -int uid
    -int utype
    -QString uname
    -QString password
    -QString photo
    -std::shared_ptr<Discount> discount
}
interface Discount {
    +Discount()
    +{abstract} double calculate(double price)
}
interface Vip1Discount {
    Vip1Discount()
    +double calculate(double price)
}
interface Vip2Discount  {
    +Vip2Discount()
    +double calculate(double price)
}
class Product {
    +Product()
    +int getPid()
    +void setPid(int pid)id = pid
    +int getUid()id
    +void setUid(int uid)
    +const QString &getPname()
    +void setPname(const QString &pname)
    +const QString &getPinfo()
    +void setPinfo(const QString &pinfo)
    +const QString &getPhoto()
    +void setPhoto(const QString &photo)
    +double getPrice()
    +void setPrice(double price)
    +int getPstate()
    +void setPstate(Pstate pstate)
    -int pid
    -int uid
    -int pstate
    -QString pname
    -QString pinfo
    -QString photo
    -double price
}
class Order {
    #int oid
    #int uid
    #int pid
    #int ostate
    #int onum
    #double opay
    #QString submittime
    +Order()
    +int getOid()
    +void setOid(int oid)
    +int getUid()
    +void setUid(int uid)
    +int getPid()
    +void setPid(int pid)
    +int getOnum()
    +void setOnum(int onum)
    +double getOpay()
    +void setOpay(double opay)
    +const QString &getSubmittime()
    +void setSubmittime(const QString &submittime)
    +int getOstate()
    +void setOstate(Ostate ostate)
}
class OrderWithFullInfo  {
    -double price
    -QString uname
    -QString pname
    -QString photo
    + OrderWithFullInfo()
    +OrderWithFullInfo(const Order &order)
    +void setProduct(const Product &product)
    +void setUser(const User &user)
    +const QString &getUname()
    +const QString &getPname()
    +const QString &getPhoto()
    +double getPrice()
}
' 数据库部分
class DataBaseHandler {
    +{static} QSqlError initDataBase()
    +void queryByInt(const QString &action, const QString &idName, int value)
    +void queryByString(const QString &action, const QString &idName, const QString &value)
    +void queryAll(const QString &action)
    +QSqlQuery &exec()
    +QSqlQuery &exec(const QString &_query)
    +const QString &getQuery() const
    +const QString &getError() const
    +void setLogging(bool logging)
    #void setTableName(const QString &_name)
    -QString query
    -QString error
    -QString tableName
    -QSqlQuery q
    -bool logging
}
class UserDbHandler  {
    +UserDbHandler()
    +{static} QString getUserClassification(const User &user)
    +{static} QList<User> queryUsers(QSqlQuery &q)
    +{static} bool db_addUser(const User &user)
    +{static} void db_updateUserType(const User &user)
    +{static} QList<User> db_getUser(const int uid)
    +{static} QList<User> db_getUser(const QString &username)
}
class ProductDbHandler {
    public:
    +ProductDbHandler()
    +{static} inline QList<Product> queryProducts(QSqlQuery &q)
    +{static} void db_addProduct(const Product &product, bool putId = false)
    +{static} void db_delProduct(const int pid)
    +{static} QList<Product> db_getProduct()
    +{static} QList<Product> db_getProduct(const int pid)
    +{static} QList<Product> db_getProduct4Seller(const int uid)
}
class OrderDbHandler  {
    public:
    +OrderDbHandler()
    +{static} QList<Order> queryOrders(QSqlQuery &q)
    +{static} void db_addOrder(const Order &order, bool putId = false)
    +{static} void db_delOrder(const int oid)
    +{static} QList<Order> db_getOrder(const int uid)
    +{static}QList<Order> db_getOrderDone()
    +{static} QList<Order> db_getOrder4Seller(const int uid)
    +{static} QHash<QString, double> getCountByMonth(const QList<Order> &orders)
    +{static} QHash<QString, double> getCountByWeek(const QList<Order> &orders)
    +{static} QList<OrderWithFullInfo> getOrdersWithFullInfo(const QList<Order> orders)
}
class DbHandlerFactory {
    public:
    +{static} std::shared_ptr<DataBaseHandler> getDbHandler(const QString &tableName, bool logging = false)
}
' 网络部分
class ServerNetService {
    -int taskid
    -QByteArray buffer
    +ServerNetService(QByteArray _buffer)
    +void userRegister(QDataStream &reader, QDataStream &writter)
    +void userLogin(QDataStream &reader, QDataStream &writter)
    +void sellerViewProduct(QDataStream &reader, QDataStream &writter)
    +void sellerAddProduct(QDataStream &reader, QDataStream &writter)
    + void sellerChangeProduct(QDataStream &reader, QDataStream &writter)
    +void buyerViewProduct(QDataStream &reader, QDataStream &writter)
    +void buyerAddOrder(QDataStream &reader, QDataStream &writter)
    +void sellerViewOrder(QDataStream &reader, QDataStream &writter)
    + void sellerChangeOrder(QDataStream &reader, QDataStream &writter)
    +void updateVip(int uid)
    +void buyerViewOrder(QDataStream &reader, QDataStream &writter)
    +void buyerChangeOrder(QDataStream &reader, QDataStream &writter)
    +void monthSalesCount(QDataStream &reader, QDataStream &writter)
    + void weekSalesCount(QDataStream &reader, QDataStream &writter)
    +QByteArray process()
}
' 服务器 单例模式
class FoodServer {
    +{static} FoodServer &getInstance()
    -FoodServer()
    -QTcpServer *server
}
Vip1Discount --|> Discount
Vip2Discount --|> Discount
User o--> Discount
OrderWithFullInfo ..> Product
OrderWithFullInfo ..> User
Order <|-- OrderWithFullInfo
UserDbHandler--|> DataBaseHandler
OrderDbHandler--|> DataBaseHandler
ProductDbHandler--|> DataBaseHandler
DbHandlerFactory ..> UserDbHandler
DbHandlerFactory ..> ProductDbHandler
DbHandlerFactory ..> OrderDbHandler
FoodServer <--o FoodServer
FoodServer ..> ServerNetService
ServerNetService ..> DbHandlerFactory
@enduml